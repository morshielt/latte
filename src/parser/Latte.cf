-- programs ------------------------------------------------

entrypoints Program ;

Program.   Program ::= [TopDef] ;

FnDef.     TopDef ::= Type Ident "(" [Arg] ")" Block ;

ClDef.     TopDef ::= "class" Ident ClassExt "{" [ClMember] "}" ;

separator nonempty TopDef "" ;

NoExt.     ClassExt ::= ;
Ext.       ClassExt ::= "extends" Ident ;

Attr.     ClMember ::= Type Ident ";" ;
Meth.    ClMember ::= Type Ident "(" [Arg] ")" Block ;

separator ClMember "";

Arg.       Arg ::= Type Ident;

separator  Arg "," ;

-- statements ----------------------------------------------

Block.     Block ::= "{" [Stmt] "}" ; --X

separator  Stmt "" ;

Empty.     Stmt ::= ";" ; --X

BStmt.     Stmt ::= Block ; --X

Decl.      Stmt ::= Type [Item] ";" ; --X

NoInit.    Item ::= Ident ; --X

Init.      Item ::= Ident "=" Expr ; --X

separator nonempty Item "," ;

Ass.       Stmt ::= Expr8 "=" Expr  ";" ;

Incr.      Stmt ::= Expr8 "++"  ";" ; --X

Decr.      Stmt ::= Expr8 "--"  ";" ; --X

Ret.       Stmt ::= "return" Expr ";" ;

VRet.      Stmt ::= "return" ";" ;

Cond.      Stmt ::= "if" "(" Expr ")" Stmt  ; --X

CondElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt  ; --X

While.     Stmt ::= "while" "(" Expr ")" Stmt ; --X

SExp.      Stmt ::= Expr  ";" ; --X

For.       Stmt ::= "for" "(" Type Ident ":" Expr ")" Stmt ; --X

-- Types ---------------------------------------------------
Arr.       Type  ::= Type "[]" ;

Cls.       Type ::= Ident ;

Int.       Type ::= "int" ;

Str.       Type ::= "string" ;

Bool.      Type ::= "boolean" ;

Void.      Type ::= "void" ;

internal   Fun. Type ::= Type "(" [Type] ")" ;

separator  Type "," ;

-- coercions  Type 1 ;


-- expressions ---------------------------------------------

-- assignables
EVar.          Expr8 ::= Ident ; --X

-- AttrAcc. AttrAccess ::= Expr7 "." Ident ;
-- EAttrAccess.   Expr8 ::= AttrAccess ;
EAttrAcc.   Expr8 ::= Expr7 "." Ident ;

-- ArrayElem.  ArrElemAccess ::= Expr7 "[" Expr "]" ;
-- EArrAccess.    Expr8 ::= ArrElemAccess ;
EArrAcc.    Expr8 ::= Expr7 "[" Expr "]" ;


-- accessibles
-- MCall.    MethodCall ::= Expr7 "." FunctionCall ;
-- EMthCall.      Expr7 ::= MethodCall ;
EMethCall.      Expr7 ::= Expr7 "." Ident "(" [Expr] ")" ;

ENew.       Expr7 ::= "new" Type ArrSize ;

ArrSize.  ArrSize ::= "[" Expr "]" ;
ClsNotArr.  ArrSize ::= ;


-- ENew.          Expr7 ::= "new" Ident ;

-- EFunCall.      Expr7 ::= FunctionCall ;
-- FunctionCall.    FunctionCall ::= Ident "(" [Expr] ")" ;
EApp.      Expr7 ::= Ident "(" [Expr] ")" ;


-- lower level expressions
ECastNull.     Expr6 ::= "(" Ident ")null";

ELitInt.   Expr6 ::= Integer ;

ELitTrue.  Expr6 ::= "true" ;

ELitFalse. Expr6 ::= "false" ;

-- EApp.      Expr6 ::= Ident "(" [Expr] ")" ;

EString.   Expr6 ::= String ;

Neg.       Expr5 ::= "-" Expr6 ; -- jeśli - -1 albo !!true ma się skompilować, to zmień Expr6 na Expr5 tu i niżej

Not.       Expr5 ::= "!" Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;

EOr.       Expr ::= Expr1 "||" Expr ;

coercions  Expr 8 ;

separator  Expr "," ;


-- misc ----------------------------------------------------

-- FunctionCall.    FunctionCall ::= Ident "(" [Expr] ")" ;

-- ArrayElem.  ArrElemAccess ::= Expr7 "[" Expr "]" ;

-- AttrAcc. AttrAccess ::= Expr7 "." Ident ;

-- MCall.    MethodCall ::= Expr7 "." FunctionCall ;

-- NewArr. NewArr ::= "new" Type "[" Expr "]" ;

-- callables -----------------------------------------------

-- -- CVNewArr. CValue ::= "(" NewArr ")" ;
-- CVFunCall.           LValue ::= FunctionCall ;
-- CVMetCall.           LValue ::= MethodCall ;
-- -- CLValue. CValue ::= LValue ;
-- -- CVMethodCall.        CValue ::= MethodCall "." FunctionCall;

-- -- lvalues -------------------------------------------------
-- LVJustIdent.         LValue ::= Ident ;
-- LVArrayAcc.          LValue ::= ArrElemAccess ;
-- LVAttrAcc.           LValue ::= AttrAccess ;

-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "#" ;

comment    "//" ;

comment    "/*" "*/" ;


-- -- callables ---------------------------------------------

-- CValFunCall.           CValue ::= FunCall ;
-- CValMetCall.           CValue ::= MetCall ;
-- -- CValLVal.              CValue ::= LValue;
-- CJustIdent.         CValue ::= Ident ; -- x = 5;
-- CalArrElem.       CValue ::= ArrElemAccess ; -- a[3] = 5;
-- CValClsAttr.       CValue ::= AttrAccess ;  -- o.x = 5;


-- FunCall.    FunCall ::= Ident "(" [Expr] ")" ;
-- MCall.      MetCall ::= CValue "." FunCall ;


-- -- assignables (lvals) ---------------------------------------------

-- JustIdent.         LValue ::= Ident ; -- x = 5;
-- LValArrElem.       LValue ::= ArrElemAccess ; -- a[3] = 5;
-- LValClsAttr.       LValue ::= AttrAccess ;  -- o.x = 5;

-- ArrayElem.  ArrElemAccess ::= CValue "[" Expr "]" ; 
-- AttrAcc.    AttrAccess    ::= CValue "." Ident ; 
-- -- ^ czy tu przeszkadza CValue?
-- -- w sensie bo to umożliwia: funcRetObject().x = 6; ale czy to problem?

-- --
